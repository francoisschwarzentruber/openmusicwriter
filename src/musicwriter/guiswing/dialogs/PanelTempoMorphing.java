/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PanelTempoMorphing.java
 *
 * Created on 6 août 2010, 23:24:32
 */

package musicwriter.guiswing.dialogs;

import java.awt.Graphics;
import java.awt.Graphics2D;
import javax.swing.ImageIcon;
import musicwriter.guiswing.ImageLoaderSwing;

/**
 * affiche un morphing entre escargot et guépard. Ce dessin
 * représente la vitesse d'un tempo.
 * @author Ancmin
 */
public class PanelTempoMorphing extends javax.swing.JPanel {
    private int pulsation = 80;

    private int pulsationClefs[] = {30, 40, 60, 80, 100, 150, 200};

    /** Creates new form PanelTempoMorphing */
    public PanelTempoMorphing() {
        initComponents();
    }

    
    private int getPulsation() {
        return pulsation;
    }



/**
 * définit la pulsation (80 = andante, 120 = allegro) à afficher
 * @param pulsation
 */
    public void setTempoPulsation(int pulsation)
    {
        this.pulsation = pulsation;
        repaint();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setName("Form"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    protected void paintComponent(Graphics g) {
        int x = getWidth()/2-24;
        g.setColor(getBackground());
        g.fillRect(0, 0, getWidth(), getHeight());

        int n = getStandardNumeroTronque(getPulsation());

        float l1 = ((float) (getPulsationClefs(n+1) - getPulsation())) / (getPulsationClefs(n+1) - getPulsationClefs(n));
        float l2 = 1.0f - l1;

        if(l1 < 0)
            l1 = 0;
        if(l1 > 1.0f)
            l1 = 1.0f;

        if(l2 < 0)
            l2 = 0;
        if(l2 > 1.0f)
            l2 = 1.0f;

        Graphics2D g2 = (Graphics2D) g;
        g2.setComposite(java.awt.AlphaComposite.getInstance(
                       java.awt.AlphaComposite.SRC_OVER,l1));
        g2.drawImage(getImageIconTempo(n).getImage(),
                x,
                0,
                null);

        g2.setComposite(java.awt.AlphaComposite.getInstance(
                       java.awt.AlphaComposite.SRC_OVER,l2));
        g2.drawImage(getImageIconTempo(n+1).getImage(),
                x,
                0,
                null);
    }



/**
 *
 * @param n
 * @return la pulsation numéro n "clef", c'est à dire où il y a une image entière !
 */
    private int getPulsationClefs(int n)
    {
        if(n < 0)
            return pulsationClefs[0];
        else if(n >= pulsationClefs.length)
            return pulsationClefs[pulsationClefs.length-1];
        else
            return pulsationClefs[n];
    }



    private ImageIcon getImageIconTempo(int numero)
    {
        return ImageLoaderSwing.getImageIcon("escarguepard" + Math.min(numero, 6) + ".png");
    }

        
    private int getStandardNumeroTronque(int pulsation) {

        for(int i = 0; i < pulsationClefs.length; i++)
        {
            if(pulsation < pulsationClefs[i])
            {
                return Math.max(0, i-1);
            }
        }

        return pulsationClefs.length-1;


    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
